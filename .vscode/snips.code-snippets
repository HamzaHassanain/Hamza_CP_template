{
  // Place your cp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    "scope": "javascript,typescript",
    "prefix": "log",
    "body": ["console.log('$1');", "$2"],
    "description": "Log output to console"
  },
  "CP TMEP": {
    "prefix": "cp",
    "body": [
      "#include <bits/stdc++.h>",
      "#include <iomanip>",
      "#include <chrono>",
      "using namespace std;",
      "// collapse",
      "using std::chrono::duration;",
      "using std::chrono::duration_cast;",
      "using std::chrono::high_resolution_clock;",
      "using std::chrono::milliseconds;",
      "",
      "bool global_use_clock = false;",
      "bool global_use_test_case = false;",
      "#define use_clock global_use_clock = true;",
      "#define use_test_case global_use_test_case = true;",
      "#define space << \" \" <<",
      "#define spaceEnd << \" \"",
      "",
      "typedef long long ll;",
      "typedef unsigned long long ull;",
      "typedef vector<ll> vec;",
      "typedef deque<ll> deq;",
      "typedef vector<ull> vecull;",
      "typedef vector<pair<ll, ll>> vecp;",
      "typedef vector<vector<ll>> vecv;",
      "typedef vector<set<ll>> vecset;",
      "typedef vector<string> vecstr;",
      "typedef pair<ll, ll> pl;",
      "typedef map<ll, ll> mpll;",
      "#define vec(type) vector<type>",
      "ll OO = 1e9;",
      "ull MOD = 1e9 + 7;",
      "",
      "#define sz(cont) size(cont)",
      "#define of :",
      "#define nl << \"\\n\"",
      "#define null nullptr",
      "#define no return void(cout << \"No\" nl)",
      "#define yes return void(cout << \"Yes\" nl)",
      "#define all(vec) vec.begin(), vec.end()",
      "#define allrev(vec) vec.rbegin(), vec.rend()",
      "#define forn(i, n) for (ll i = 0; i < n; ++i)",
      "#define for1n(i, n) for (ll i = 1; i <= n; ++i)",
      "#define forr(i, n) for (ll i = n - 1; i >= 0; --i)",
      "#define negMod(n, m) (n % m + m) % m",
      "bool by_len(string &a, string b)",
      "{",
      "    return a.size() < b.size();",
      "}",
      "template <typename T>",
      "istream &operator>>(istream &in, vector<T> &into)",
      "{",
      "    for (ll i = 0; i < size(into); i++)",
      "        in >> into[i];",
      "",
      "    return in;",
      "}",
      "template <typename T, typename S>",
      "istream &operator>>(istream &in, vector<pair<T, S>> &into)",
      "{",
      "    for (ll i = 0; i < size(into); i++)",
      "        in >> into[i].first >> into[i].second;",
      "",
      "    return in;",
      "}",
      "template <typename T>",
      "ostream &operator<<(ostream &out, vector<T> &outto)",
      "{",
      "    for (ll i = 0; i < size(outto); i++)",
      "        out << outto[i] << \" \";",
      "    out nl;",
      "    return out;",
      "}",
      "template <typename T>",
      "ostream &operator<<(ostream &out, deque<T> &outto)",
      "{",
      "    for (ll i = 0; i < size(outto); i++)",
      "        out << outto[i] << \" \";",
      "    out nl;",
      "    return out;",
      "}",
      "template <typename T, typename S>",
      "ostream &operator<<(ostream &out, vector<pair<T, S>> &outto)",
      "{",
      "    for (ll i = 0; i < size(outto); i++)",
      "        out << outto[i].first << \":\" << outto[i].second nl;",
      "    return out;",
      "}",
      "template <typename T, typename S>",
      "ostream &operator<<(ostream &out, pair<T, S> &outto)",
      "{",
      "    out << outto.first << \":\" << outto.second nl;",
      "    return out;",
      "}",
      "#define sep cout << \"===================================\" << endl;",
      "#define rv(exp) return void(cout << exp)",
      "#define str string",
      "#define maxHeap(type) priority_queue<type, vector<type>, less<type>>",
      "#define minHeap(type) priority_queue<type, vector<type>, greater<type>>",
      "",
      "void FastIO()",
      "{",
      "    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
      "#ifndef ONLINE_JUDGE",
      "    freopen(\"input.txt\", \"r\", stdin), freopen(\"output.txt\", \"w\", stdout);",
      "#endif",
      "}",
      "",
      "void test_case()",
      "{$1",
      "}",
      "int main()",
      "{",
      "    use_test_case;",
      "",
      "    auto t1 = high_resolution_clock::now();",
      "    FastIO();",
      "    ll tc = 1;",
      "    if (global_use_test_case)",
      "        cin >> tc;",
      "    while (tc--)",
      "        test_case();",
      "    auto t2 = high_resolution_clock::now();",
      "",
      "    /* Getting number of milliseconds as a double. */",
      "    duration<double, std::milli> ms_double = t2 - t1;",
      "    if (global_use_clock)",
      "    {",
      "",
      "        cout nl;",
      "        cout << \"Chrono =========================\" nl;",
      "        cout << ms_double.count() << \"ms\\n\";",
      "        cout << \"Chrono =========================\";",
      "    }",
      "}"
    ],
    "description": "CP TMEP"
  },
  "sieve": {
    "prefix": "sieve",
    "body": [
      "const ull N = 1e6 + 5;",
      "bool prime[N];",
      "void sieve()",
      "{",
      "    memset(prime, true, sizeof(prime));",
      "    prime[1] = false;",
      "    prime[0] = false;",
      "    for (int p = 2; p * p < N; p++)",
      "    {",
      "        if (prime[p] == true)",
      "        {",
      "",
      "            for (int i = p * p; i < N; i += p)",
      "                prime[i] = false;",
      "        }",
      "    }",
      "}"
    ],
    "description": "sieve"
  },
  "tprime": {
    "prefix": "tprime",
    "body": [
      "bool tprime(ll num)",
      "{",
      "    double y = sqrt(num);",
      "    ll x = sqrt(num);",
      "    return prime[x] && y == x;",
      "}",
      ""
    ],
    "description": "tprime"
  },
  "gcd": {
    "prefix": "gcd",
    "body": [
      "ll gcd(ll a, ll b)",
      "{",
      "    if (a == 0)",
      "        return b;",
      "    return gcd(b % a, a);",
      "}",
      ""
    ],
    "description": "gcd"
  },
  "gcdAll": {
    "prefix": "gcdAll",
    "body": [
      "ll gcdAll(vector<ll> &nums, int from = 0)",
      "{",
      "    ll n = sz(nums);",
      "    ll cur = nums[from];",
      "    for (ll i = from + 1; i < n; i++)",
      "    {",
      "        cur = gcd(cur, nums[i]);",
      "    }",
      "    return cur;",
      "}"
    ],
    "description": "gcdAll"
  },
  "all Equal": {
    "prefix": "all_equal",
    "body": [
      "bool all_equal(vector<ll> &nums, int from = 0)",
      "{",
      "    int n = sz(nums);",
      "    ll cur = nums[from];",
      "    for (ll i = from + 1; i < n; i++)",
      "    {",
      "        if (cur != nums[i])",
      "            return false;",
      "    }",
      "    return true;",
      "}"
    ],
    "description": "all Equal"
  },
  "sigma": {
    "prefix": "sigma",
    "body": ["ull sigma(ull x)", "{", "    return x * (x + 1) / 2;", "}"],
    "description": "sigma"
  },
  "sum_num": {
    "prefix": "sum_num",
    "body": [
      "ll sum_num(ll n)",
      "{",
      "    ll sum = 0;",
      "    while (n > 0)",
      "    {",
      "        sum += (n % 10);",
      "        n /= 10;",
      "    }",
      "    return sum;",
      "}"
    ],
    "description": "sum_num"
  },
  "custom_pow": {
    "prefix": "custom_pow",
    "body": [
      "ull custom_pow(ull a, ull b)",
      "{",
      "    ull res = 1;",
      "    while (b--)",
      "        res *= a;",
      "",
      "    return res;",
      "}"
    ],
    "description": "custom_pow"
  },
  "custom_log": {
    "prefix": "custom_log",
    "body": [
      "ll custom_log(ll a, ll b)",
      "{",
      "    return log2(a) / log2(b);",
      "}"
    ],
    "description": "custom_log"
  },
  "primeFactors": {
    "prefix": "primeFactors",
    "body": [
      "vec primeFactors(int n)",
      "{",
      "    vec factors;",
      "    while (n % 2 == 0)",
      "    {",
      "        factors.push_back(2);",
      "        n = n / 2;",
      "    }",
      "",
      "    for (int i = 3; i <= sqrt(n); i = i + 2)",
      "    {",
      "        while (n % i == 0)",
      "        {",
      "            factors.push_back(i);",
      "            n = n / i;",
      "        }",
      "    }",
      "",
      "    if (n > 2)",
      "        factors.push_back(n);",
      "",
      "    return factors;",
      "}",
      ""
    ],
    "description": "primeFactors"
  },
  "max": {
    "prefix": "max",
    "body": [
      "ll max(vector<ll> &nums)",
      "{",
      "    int n = size(nums);",
      "    ll mx = -OO;",
      "    for (ll i = 0; i < n; i++)",
      "    {",
      "        mx = max(mx, nums[i]);",
      "    }",
      "    return mx;",
      "}"
    ],
    "description": "max"
  },
  "min": {
    "prefix": "min",
    "body": [
      "ll min(vector<ll> &nums)",
      "{",
      "    int n = size(nums);",
      "    ll mn = OO;",
      "    for (ll i = 0; i < n; i++)",
      "    {",
      "        mn = min(mn, nums[i]);",
      "    }",
      "    return mn;",
      "}"
    ],
    "description": "min"
  },
  "fact": {
    "prefix": "fact",
    "body": [
      "ull fact(ull x)",
      "{",
      "    ull res = 1;",
      "    while (x > 0)",
      "        res *= x--;",
      "",
      "    return res;",
      "}"
    ],
    "description": "min"
  },
  "count_bin_ones": {
    "prefix": "count_bin_ones",
    "body": [
      "ll count_bin_ones(ll n)",
      "{",
      "    int c = 0;",
      "    int i = 1;",
      "    while (n)",
      "    {",
      "        if (n & 1)",
      "            c++;",
      "        n = n >> 1;",
      "    }",
      "    return c;",
      "}"
    ],
    "description": "count_bin_ones"
  },
  "bitMaskInit": {
    "prefix": "bitMaskInit",
    "body": [
      "int bitMaskFirst(string s)",
      "{",
      "    const int N = s.size();",
      "    int MAX = 1 << N;",
      "    for (int mask = 1; mask < MAX; mask++)",
      "    {",
      "        string subSq = \"\";",
      "        for (int i = 0; i < N; i++)",
      "        {",
      "            if (mask & (1 << i))",
      "                subSq += s[i];",
      "        }",
      "    }",
      "}"
    ],
    "description": "bitMaskInit"
  },
  "num_len": {
    "prefix": "num_len",
    "body": [
      "ll num_len(ll n)",
      "{",
      "    ll res = 0;",
      "    while (n)",
      "    {",
      "        if (n % 10)",
      "            res++;",
      "        n /= 10;",
      "    }",
      "    return res;",
      "}"
    ],
    "description": "bitMaskInit"
  },
  "acc": {
    "prefix": "acc",
    "body": [
      "ull acc(vec &nums)",
      "{",
      "    ull sum = 0;",
      "    for (int i = 0; i < nums.size(); i++)",
      "    {",
      "        sum += nums[i];",
      "    }",
      "    return sum;",
      "}"
    ],
    "description": "acc"
  },
  "sigmaSquared": {
    "prefix": "sigmaSquared",
    "body": [
      "ull sigmaSquared(ull x)",
      "{",
      "    return (((x * ((x + 1))) * (((x * 2) + 1)))) / 6;",
      "}"
    ],
    "description": "sigmaSquared"
  }
}
