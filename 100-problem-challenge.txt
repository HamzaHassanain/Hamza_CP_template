1- Minimize Deviation in Array: LeetCode Hard
    1-> You should not think in a linear fasion
    2-> Work a little bit harder
    3-> do not look at any tag or hint before 30 mins of getting stuck 
    4-> while getting forwoards do not look at any hint
    5-> do not read a full solution try coming up with it after reading an intuation or just seeing some part of it
2- Vlad and a Pair of Numbers: codeforces 1400 
    1-> faild faild faild
    2-> the only numbers to get (a+b)/2 = x is => x/2 + x*2 - x/2
3- Matching Numbers: codeforces 1200
    1-> semi success, never give up
    2-> seperate the problem into subproblems, solve those subs and try coming up with the solution
4- The Forbidden Permutation: codeforces 1300 
    1-> success
    2-> think slow
    3-> consider differnt views
5- Cake Assembly Line: codeforces 1300
    1-> semi success, go read editorial quickly does not have to understand it completly and then re-try
        with the problem it might redirect you to the right way 
6- Ice and Fire : codeforces 1300
    1-> semi success
    2-> make sure you understand evrey thing before coding
7- Coloring:
    1-> faild
    2-> come back to it latter when you are stronger mf
8- Absolute Sorting: codeforces 1400
    1-> success make good use of a hint
    2-> try considering diffrent views of the problem
11111111111111111 Contest => a+b in 16 mins => wating rating => no C
9 => Edit Distance: LeetCode Hard
    1-> failer, do not be afraid of dp and do your best
    2-> no solutions before 30 mins of stuck -> to codeforces
10 => Loki the eater: codefroces 1000
    1-> Cake Assembly line
    2-> (ai-x <= range <= x+ai) => then maximze the low and minize the hi until they flip then reset
11 => Subtract Operation: codeforces 1100
    1-> two sum;
    2-> think think think you bitch
    3-> go throw the editorial line by line;
12 => Make Equal With Mod: codeforces 1200
    1-> 0s and 1s
    2-> math tricks
13 => CoPrime Segments: codeforces edu two pointer
    1-> segment tree try and concentrate
            1 indexed
            left = 2 * node
            right = 2 * node + 1

            0 indexed
            left = 2 * node + 1
            right = 2 * node + 2

            remember mid + 1